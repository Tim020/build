#!/usr/bin/env python3

"""
Update the given JIRA approval ticket with a list of the binaries
for the given product and release.  The list is generated from
accessing the S3 bucket packages.couchbase.com (via boto) and excluding
undesired entries.
"""

import argparse
import json
import os

import boto3

from jira import JIRA


def connect_jira():
    """
    Uses private files in ~/.ssh to create a connection to Couchbase JIRA.

    Expected files:
      build_jira.pem - Private key registered with Jira Application
      build_jira.json - JSON block with "access_token", "access_token_secret",
          and "consumer_key" fields as generated per above URL
    """

    home_dir = os.environ['HOME']

    with open('{}/.ssh/build_jira.pem'.format(home_dir)) as key_cert_file:
        key_cert_data = key_cert_file.read()

    with open('{}/.ssh/build_jira.json'.format(home_dir)) as oauth_file:
        oauth_dict = json.load(oauth_file)

    oauth_dict['key_cert'] = key_cert_data

    return JIRA({'server': 'https://issues.couchbase.com'}, oauth=oauth_dict)


def get_binaries_list(product, version):
    """
    Extract list of binaries for the given product and version,
    excluding certain files (such as MD5/SHA files)
    """

    if product == 'couchbase-server':
        product = ''
    else:
        product = '/{}'.format(product)

    excl_suffixes = ('.md5', '.sha256', '.xml')
    s3_rel_bucket = 'packages.couchbase.com'
    s3_rel_prefix = 'releases{}/{}/'.format(product, version)

    # Generate list of files from s3 for given release
    os.environ['AWS_SHARED_CREDENTIALS_FILE'] = \
        '{}/.ssh/aws-credentials'.format(os.environ['HOME'])
    s3 = boto3.resource('s3')
    packages = s3.Bucket(s3_rel_bucket)
    releases = packages.objects.filter(Prefix=s3_rel_prefix)
    rel_files = [f.key.split('/')[-1] for f in releases.all()]

    url_list = list()

    # Filter out undesired files
    for rfile in rel_files:
        if not rfile.endswith(excl_suffixes) and 'unsigned' not in rfile:
            url_list.append('https://{}/{}{}'.format(
                s3_rel_bucket, s3_rel_prefix, rfile
            ))

    return url_list


def update_jira_ticket(issue, url_list):
    """Update the JIRA approval ticket with the list of binaries"""

    jira = connect_jira()
    jira.add_comment(issue,
                     '\n'.join(url_list),
                     visibility={'type': 'group', 'value': 'Membase Inc'})


if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        description='Update JIRA approval ticket for product uploads'
    )
    parser.add_argument('product', type=str, help='Product to check')
    parser.add_argument('version', type=str, help='Version of product')
    parser.add_argument('issue', type=str, help='Approval ticket for version')

    args = parser.parse_args()

    urls = get_binaries_list(args.product, args.version)
    update_jira_ticket(args.issue, urls)
